from sklearn.neighbors import KNeighborsClassifier
knn=kNeihborsClassifier(n_neighbors=6)
knn.fit(iris['data'],iris['target])                  { pass both data and target as numpy array, 
                                                       knn need nampy array or pandas dataframe. It needs continuous value as feature, no missing values in the data,
                                                       features in columns and obseravation in rows}
                                                       
Predict unlabeled data:
prediction= knn.predict(X_new)


KNN Exercise with party data:

# Import KNeighborsClassifier from sklearn.neighbors
from sklearn.neighbors import KNeighborsClassifier

# Create arrays for the features and the response variable
y = df['party'].values
X = df.drop('party', axis=1).values                  { use of the .values attribute to ensure X and y are NumPy arrays. Without using 
                                                     .values, X and y are a DataFrame and Series respectively; the scikit-learn API will accept them in
                                                      this form also as long as they are of the right shape.}

# Create a k-NN classifier with 6 neighbors
knn = KNeighborsClassifier(n_neighbors=6)

# Fit the classifier to the data
knn.fit(X,Y)
